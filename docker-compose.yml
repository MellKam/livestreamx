services:
  api:
    image: ghcr.io/satont/livestreamx:api-latest
    build:
        context: .
        dockerfile: apps/api/Dockerfile
        args:
          - VITE_STREAM_URL=http://localhost:8889/mystream/
    env_file: .env
    networks:
      - default
      - caddy
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      caddy: streamx.satont.dev
      caddy.handle_path: /api/*
      caddy.handle_path.0_reverse_proxy: "{{upstreams 1337}}"

  frontend:
    image: ghcr.io/satont/livestreamx:frontend-latest
    restart: always
    build:
        context: .
        dockerfile: apps/frontend/Dockerfile
    networks:
      - default
      - caddy
    labels:
      caddy: streamx.satont.dev
      caddy.reverse_proxy: "{{upstreams 8080}}"

  redis:
    image: redis:latest
    command: redis-server --appendonly yes
    restart: always
    volumes:
      - redis:/data

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: livestreamx
      POSTGRES_PASSWORD: livestreamx
      POSTGRES_DB: livestreamx
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mediamtx:
    image: bluenviron/mediamtx:latest-ffmpeg
    restart: always
    networks:
      - caddy
    ports:
      - "8554:8554"
      - "1935:1935"
      - "8888:8888"
      - "8889:8889"
      - "8890:8890/udp"
      - "8189:8189/udp"
    volumes:
      - ./mediamtx.yml:/mediamtx.yml

volumes:
    postgres:
    redis:

networks:
  caddy:
    external: true