extend type Query {
    chatMessagesLatest(limit: Int): [ChatMessage!]!
    getEmotes: [Emote!]!
}

extend type Mutation {
    sendMessage(input: SendMessageInput!): Boolean! @isAuthenticated @notBanned
    attachFile(file: Upload!): AttachedFile! @isAuthenticated @notBanned
}


extend type Subscription {
    chatMessages: ChatMessage!
    systemMessages: SystemMessage!
}

type ChatMessage {
    id: ID!
    segments: [MessageSegment!]!
    sender: User!
    createdAt: Time!
}

enum MessageSegmentType {
    TEXT
    LINK
    MENTION
    EMOTE
}

interface MessageSegment {
    type: MessageSegmentType!
    content: String!
}

input SendMessageInput {
    text: String!
}

type MessageSegmentText implements MessageSegment {
    content: String!
    type: MessageSegmentType!
}

type MessageSegmentLink implements MessageSegment {
    content: String!
    type: MessageSegmentType!
}

type MessageSegmentMention implements MessageSegment {
    content: String!
    type: MessageSegmentType!
    user: User!
}

type MessageSegmentEmote implements MessageSegment {
    content: String!
    type: MessageSegmentType!
    emote: Emote!
}

type AttachedFile {
    id: ID!
    url: String!
    name: String!
    size: Int!
    mimeType: String!
    createdAt: Time!
}

enum SystemMessageType {
    EMOTE_ADDED
    EMOTE_REMOVED
    EMOTE_UPDATED
}

interface SystemMessage {
    type: SystemMessageType!
}

type Emote {
    id: String!
    name: String!
    url: String!
    width: Int!
    height: Int!
}

type SystemMessageEmoteAdded implements SystemMessage {
    type: SystemMessageType!
    emote: Emote!
}

type SystemMessageEmoteRemoved implements SystemMessage {
    type: SystemMessageType!
    emoteId: String!
}

type SystemMessageEmoteUpdated implements SystemMessage {
    type: SystemMessageType!
    emote: Emote!
}

