// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type MessageSegment interface {
	IsMessageSegment()
	GetType() MessageSegmentType
	GetContent() string
}

type BanUser struct {
	UserID   string `json:"userId"`
	NewValue bool   `json:"newValue"`
}

type ChatMessage struct {
	ID        string           `json:"id"`
	Segments  []MessageSegment `json:"segments"`
	Sender    *User            `json:"sender"`
	CreatedAt time.Time        `json:"createdAt"`
}

type MessageSegmentLink struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
}

func (MessageSegmentLink) IsMessageSegment()                {}
func (this MessageSegmentLink) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentLink) GetContent() string          { return this.Content }

type MessageSegmentMention struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
	User    *User              `json:"user"`
}

func (MessageSegmentMention) IsMessageSegment()                {}
func (this MessageSegmentMention) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentMention) GetContent() string          { return this.Content }

type MessageSegmentText struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
}

func (MessageSegmentText) IsMessageSegment()                {}
func (this MessageSegmentText) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentText) GetContent() string          { return this.Content }

type Mutation struct {
}

type Query struct {
}

type Role struct {
	ID       string        `json:"id"`
	Name     string        `json:"name"`
	ImageURL *string       `json:"imageUrl,omitempty"`
	Features []RoleFeature `json:"features"`
}

type SendMessageInput struct {
	Text string `json:"text"`
}

type Stream struct {
	ID string `json:"ID"`
}

type Subscription struct {
}

type User struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	DisplayName string    `json:"displayName"`
	Color       string    `json:"color"`
	Roles       []Role    `json:"roles"`
	IsBanned    bool      `json:"isBanned"`
	CreatedAt   time.Time `json:"createdAt"`
	AvatarURL   string    `json:"avatarUrl"`
}

type MessageSegmentType string

const (
	MessageSegmentTypeText    MessageSegmentType = "TEXT"
	MessageSegmentTypeLink    MessageSegmentType = "LINK"
	MessageSegmentTypeMention MessageSegmentType = "MENTION"
)

var AllMessageSegmentType = []MessageSegmentType{
	MessageSegmentTypeText,
	MessageSegmentTypeLink,
	MessageSegmentTypeMention,
}

func (e MessageSegmentType) IsValid() bool {
	switch e {
	case MessageSegmentTypeText, MessageSegmentTypeLink, MessageSegmentTypeMention:
		return true
	}
	return false
}

func (e MessageSegmentType) String() string {
	return string(e)
}

func (e *MessageSegmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageSegmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageSegmentType", str)
	}
	return nil
}

func (e MessageSegmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleFeature string

const (
	RoleFeatureBanUsers RoleFeature = "BAN_USERS"
)

var AllRoleFeature = []RoleFeature{
	RoleFeatureBanUsers,
}

func (e RoleFeature) IsValid() bool {
	switch e {
	case RoleFeatureBanUsers:
		return true
	}
	return false
}

func (e RoleFeature) String() string {
	return string(e)
}

func (e *RoleFeature) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleFeature(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleFeature", str)
	}
	return nil
}

func (e RoleFeature) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
