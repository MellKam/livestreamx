package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"strings"
	"unicode/utf8"

	"github.com/google/uuid"
	"github.com/samber/lo"
	"github.com/satont/stream/apps/api/internal/gql/gqlmodel"
	"github.com/satont/stream/apps/api/internal/httpserver/middlewares"
	"github.com/satont/stream/apps/api/internal/repositories/user"
)

// UpdateUserProfile is the resolver for the updateUserProfile field.
func (r *mutationResolver) UpdateUserProfile(ctx context.Context, input gqlmodel.UpdateUserProfileInput) (*gqlmodel.User, error) {
	currentUser := middlewares.GetUserFromContext(ctx)
	if currentUser == nil {
		return nil, fmt.Errorf("user not found")
	}

	opts := user.UpdateOpts{}
	if input.Color.IsSet() {
		opts.Color = input.Color.Value()
	}

	if input.Name.IsSet() && input.DisplayName.IsSet() {
		if strings.ToLower(*input.Name.Value()) != strings.ToLower(*input.DisplayName.Value()) {
			return nil, fmt.Errorf("name and display does not match")
		}

		if !userNameRegexp.MatchString(*input.Name.Value()) {
			return nil, fmt.Errorf("name does not match pattern: %s", userNameRegexp.String())
		}

		if utf8.RuneCountInString(*input.Name.Value()) < 3 || utf8.RuneCountInString(*input.Name.Value()) > 25 {
			return nil, fmt.Errorf("name length must be between 3 and 25 characters")
		}

		if utf8.RuneCountInString(*input.DisplayName.Value()) < 3 || utf8.RuneCountInString(*input.DisplayName.Value()) > 25 {
			return nil, fmt.Errorf("display name length must be between 3 and 25 characters")
		}

		if !userNameRegexp.MatchString(*input.DisplayName.Value()) {
			return nil, fmt.Errorf(
				"display name does not match pattern: %s",
				userNameRegexp.String(),
			)
		}

		opts.Name = lo.ToPtr(strings.ToLower(*input.Name.Value()))
		opts.DisplayName = input.DisplayName.Value()
	}

	newUser, err := r.userRepo.Update(
		ctx,
		currentUser.ID,
		opts,
	)
	if err != nil {
		return nil, err
	}

	return &gqlmodel.User{
		ID:          newUser.ID.String(),
		Name:        newUser.Name,
		DisplayName: newUser.DisplayName,
		Color:       newUser.Color,
		Roles:       nil,
		IsBanned:    newUser.Banned,
		CreatedAt:   newUser.CreatedAt,
		AvatarURL:   newUser.AvatarUrl,
	}, nil
}

// UserProfile is the resolver for the userProfile field.
func (r *queryResolver) UserProfile(ctx context.Context) (*gqlmodel.User, error) {
	userID, err := r.sessionStorage.GetUserID(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.userRepo.FindByID(ctx, uuid.MustParse(userID))
	if err != nil {
		return nil, err
	}

	return &gqlmodel.User{
		ID:          user.ID.String(),
		Name:        user.Name,
		DisplayName: user.DisplayName,
		Color:       user.Color,
		Roles:       nil,
		IsBanned:    user.Banned,
		CreatedAt:   user.CreatedAt,
		AvatarURL:   user.AvatarUrl,
		IsAdmin:     user.IsAdmin,
	}, nil
}
