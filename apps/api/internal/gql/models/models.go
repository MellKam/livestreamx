// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type MessageSegment interface {
	IsMessageSegment()
	GetType() MessageSegmentType
	GetContent() string
}

type ChatMessage struct {
	ID        string           `json:"id"`
	Segments  []MessageSegment `json:"segments"`
	Sender    *User            `json:"sender"`
	CreatedAt time.Time        `json:"createdAt"`
}

type Mutation struct {
}

type Query struct {
}

type SendMessageInput struct {
	Text string `json:"text"`
}

type Stream struct {
	ID string `json:"ID"`
}

type Subscription struct {
}

type User struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	DisplayName *string     `json:"displayName,omitempty"`
	Color       string      `json:"color"`
	Roles       []*UserRole `json:"roles"`
}

type UserRole struct {
	ID       string  `json:"id"`
	Name     string  `json:"name"`
	ImageURL *string `json:"imageUrl,omitempty"`
}

type MessageSegmentType string

const (
	MessageSegmentTypeText MessageSegmentType = "TEXT"
)

var AllMessageSegmentType = []MessageSegmentType{
	MessageSegmentTypeText,
}

func (e MessageSegmentType) IsValid() bool {
	switch e {
	case MessageSegmentTypeText:
		return true
	}
	return false
}

func (e MessageSegmentType) String() string {
	return string(e)
}

func (e *MessageSegmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageSegmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageSegmentType", str)
	}
	return nil
}

func (e MessageSegmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
